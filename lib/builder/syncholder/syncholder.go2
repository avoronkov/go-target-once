// vim: ft=go
package syncholder

import (
	"sync"

	/// Instantiate types
	"github.com/avoronkov/go-target-once/lib/targets"
)

type SyncHolder[T any] struct {
	data T
	ready bool
	mutex sync.Mutex

	observers int
	notify chan T
}

func NewSyncHolder[T any]() *SyncHolder[T] {
	return &SyncHolder[T]{
		notify: make(chan T),
	}
}

func (o *SyncHolder[T]) Put(data T) {
	o.mutex.Lock()
	defer o.mutex.Unlock()

	o.data = data
	o.ready = true

	if o.observers >= 0 {
		for i := 0; i < o.observers; i++ {
			o.notify <- data
		}
		close(o.notify)
		o.observers = -1
	}
}

func (o *SyncHolder[T]) Get() T {
	o.mutex.Lock()

	if o.ready {
		o.mutex.Unlock()
		return o.data
	}

	// wait for data is ready
	o.observers++
	o.mutex.Unlock()

	return <-o.notify
}

/// Instantiate types
type ResultSyncHolder = SyncHolder[*targets.Result]

func NewResultSyncHolder() *ResultSyncHolder {
	return NewSyncHolder[*targets.Result]()
}
