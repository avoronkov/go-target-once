// vim: ft=go
package syncholder

import (
	"sync"

	/// Instantiate types
	"github.com/avoronkov/go-target-once/lib/targets"
)

type SyncHolder[T any] struct {
	data T
	ready bool

	cond *sync.Cond
}

func NewSyncHolder[T any]() *SyncHolder[T] {
	return &SyncHolder[T]{
		cond: sync.NewCond(new(sync.Mutex)),
	}
}

func (o *SyncHolder[T]) Put(data T) {
	o.cond.L.Lock()
	defer o.cond.L.Unlock()

	o.data = data
	o.ready = true

	o.cond.Broadcast()
}

func (o *SyncHolder[T]) Get() T {
	o.cond.L.Lock()
	defer o.cond.L.Unlock()

	for !o.ready {
		o.cond.Wait()
	}

	return o.data
}

/// Instantiate types
type ResultSyncHolder = SyncHolder[*targets.Result]

func NewResultSyncHolder() *ResultSyncHolder {
	return NewSyncHolder[*targets.Result]()
}
